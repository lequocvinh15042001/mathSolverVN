"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var uuid = _interopRequireWildcard(require("uuid/v4"));

var _decorate = _interopRequireDefault(require("./decorate"));

var _tool = require("./tool");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getUploadPlaceholder(file, onImageUpload) {
  var placeholder = (0, _decorate.default)('', 'image', {
    target: 'Uploading_' + uuid(),
    imageUrl: ''
  }).text;
  var uploaded = new Promise(function (resolve) {
    var isCallback = true;

    var handleUploaded = function handleUploaded(url) {
      if (isCallback) {
        console.warn('Deprecated: onImageUpload should return a Promise, callback will be removed in future');
      }

      resolve((0, _decorate.default)('', 'image', {
        target: file.name,
        imageUrl: url
      }).text);
    }; // 兼容回调和Promise


    var upload = onImageUpload(file, handleUploaded);

    if ((0, _tool.isPromise)(upload)) {
      isCallback = false;
      upload.then(handleUploaded);
    }
  });
  return {
    placeholder: placeholder,
    uploaded: uploaded
  };
}

var _default = getUploadPlaceholder;
exports.default = _default;