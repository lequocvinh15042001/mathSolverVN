{"ast":null,"code":"// Proceess '\\n'\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nmodule.exports = function newline(state, silent) {\n  var pmax,\n      max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A\n  /* \\n */\n  ) {\n    return false;\n  }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax; // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++; // skip heading spaces for next line\n\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  state.pos = pos;\n  return true;\n};","map":{"version":3,"names":["isSpace","require","module","exports","newline","state","silent","pmax","max","pos","src","charCodeAt","pending","length","posMax","replace","push","slice"],"sources":["/Users/lequocvinh/MathSolver/mathSolverVN/node_modules/markdown-it/lib/rules_inline/newline.js"],"sourcesContent":["// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,OAAzC;;AAGAE,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;EAC/C,IAAIC,IAAJ;EAAA,IAAUC,GAAV;EAAA,IAAeC,GAAG,GAAGJ,KAAK,CAACI,GAA3B;;EAEA,IAAIJ,KAAK,CAACK,GAAN,CAAUC,UAAV,CAAqBF,GAArB,MAA8B;EAAI;EAAtC,EAAgD;IAAE,OAAO,KAAP;EAAe;;EAEjEF,IAAI,GAAGF,KAAK,CAACO,OAAN,CAAcC,MAAd,GAAuB,CAA9B;EACAL,GAAG,GAAGH,KAAK,CAACS,MAAZ,CAN+C,CAQ/C;EACA;EACA;EACA;;EACA,IAAI,CAACR,MAAL,EAAa;IACX,IAAIC,IAAI,IAAI,CAAR,IAAaF,KAAK,CAACO,OAAN,CAAcD,UAAd,CAAyBJ,IAAzB,MAAmC,IAApD,EAA0D;MACxD,IAAIA,IAAI,IAAI,CAAR,IAAaF,KAAK,CAACO,OAAN,CAAcD,UAAd,CAAyBJ,IAAI,GAAG,CAAhC,MAAuC,IAAxD,EAA8D;QAC5DF,KAAK,CAACO,OAAN,GAAgBP,KAAK,CAACO,OAAN,CAAcG,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,CAAhB;QACAV,KAAK,CAACW,IAAN,CAAW,WAAX,EAAwB,IAAxB,EAA8B,CAA9B;MACD,CAHD,MAGO;QACLX,KAAK,CAACO,OAAN,GAAgBP,KAAK,CAACO,OAAN,CAAcK,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CAAhB;QACAZ,KAAK,CAACW,IAAN,CAAW,WAAX,EAAwB,IAAxB,EAA8B,CAA9B;MACD;IAEF,CATD,MASO;MACLX,KAAK,CAACW,IAAN,CAAW,WAAX,EAAwB,IAAxB,EAA8B,CAA9B;IACD;EACF;;EAEDP,GAAG,GA3B4C,CA6B/C;;EACA,OAAOA,GAAG,GAAGD,GAAN,IAAaR,OAAO,CAACK,KAAK,CAACK,GAAN,CAAUC,UAAV,CAAqBF,GAArB,CAAD,CAA3B,EAAwD;IAAEA,GAAG;EAAK;;EAElEJ,KAAK,CAACI,GAAN,GAAYA,GAAZ;EACA,OAAO,IAAP;AACD,CAlCD"},"metadata":{},"sourceType":"script"}