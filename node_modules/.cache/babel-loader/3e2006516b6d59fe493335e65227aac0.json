{"ast":null,"code":"import NativeMethod from './methods/native.js';\nimport IndexeDbMethod from './methods/indexed-db.js';\nimport LocalstorageMethod from './methods/localstorage.js';\nimport SimulateMethod from './methods/simulate.js';\nimport { isNode } from './util'; // order is important\n\nvar METHODS = [NativeMethod, // fastest\nIndexeDbMethod, LocalstorageMethod];\n/**\n * The NodeMethod is loaded lazy\n * so it will not get bundled in browser-builds\n */\n\nif (isNode) {\n  /**\n   * we use the non-transpiled code for nodejs\n   * because it runs faster\n   */\n  var NodeMethod = require('../../src/methods/' + // use this hack so that browserify and others\n  // do not import the node-method by default\n  // when bundling.\n  'node.js');\n  /**\n   * this will be false for webpackbuilds\n   * which will shim the node-method with an empty object {}\n   */\n\n\n  if (typeof NodeMethod.canBeUsed === 'function') {\n    METHODS.push(NodeMethod);\n  }\n}\n\nexport function chooseMethod(options) {\n  var chooseMethods = [].concat(options.methods, METHODS).filter(Boolean); // directly chosen\n\n  if (options.type) {\n    if (options.type === 'simulate') {\n      // only use simulate-method if directly chosen\n      return SimulateMethod;\n    }\n\n    var ret = chooseMethods.find(function (m) {\n      return m.type === options.type;\n    });\n    if (!ret) throw new Error('method-type ' + options.type + ' not found');else return ret;\n  }\n  /**\n   * if no webworker support is needed,\n   * remove idb from the list so that localstorage is been chosen\n   */\n\n\n  if (!options.webWorkerSupport && !isNode) {\n    chooseMethods = chooseMethods.filter(function (m) {\n      return m.type !== 'idb';\n    });\n  }\n\n  var useMethod = chooseMethods.find(function (method) {\n    return method.canBeUsed();\n  });\n  if (!useMethod) throw new Error('No useable methode found:' + JSON.stringify(METHODS.map(function (m) {\n    return m.type;\n  })));else return useMethod;\n}","map":{"version":3,"names":["NativeMethod","IndexeDbMethod","LocalstorageMethod","SimulateMethod","isNode","METHODS","NodeMethod","require","canBeUsed","push","chooseMethod","options","chooseMethods","concat","methods","filter","Boolean","type","ret","find","m","Error","webWorkerSupport","useMethod","method","JSON","stringify","map"],"sources":["/Users/lequocvinh/MathSolver/mathSolverVN/node_modules/broadcast-channel/dist/es/method-chooser.js"],"sourcesContent":["import NativeMethod from './methods/native.js';\nimport IndexeDbMethod from './methods/indexed-db.js';\nimport LocalstorageMethod from './methods/localstorage.js';\nimport SimulateMethod from './methods/simulate.js';\nimport { isNode } from './util'; // order is important\n\nvar METHODS = [NativeMethod, // fastest\nIndexeDbMethod, LocalstorageMethod];\n/**\n * The NodeMethod is loaded lazy\n * so it will not get bundled in browser-builds\n */\n\nif (isNode) {\n  /**\n   * we use the non-transpiled code for nodejs\n   * because it runs faster\n   */\n  var NodeMethod = require('../../src/methods/' + // use this hack so that browserify and others\n  // do not import the node-method by default\n  // when bundling.\n  'node.js');\n  /**\n   * this will be false for webpackbuilds\n   * which will shim the node-method with an empty object {}\n   */\n\n\n  if (typeof NodeMethod.canBeUsed === 'function') {\n    METHODS.push(NodeMethod);\n  }\n}\n\nexport function chooseMethod(options) {\n  var chooseMethods = [].concat(options.methods, METHODS).filter(Boolean); // directly chosen\n\n  if (options.type) {\n    if (options.type === 'simulate') {\n      // only use simulate-method if directly chosen\n      return SimulateMethod;\n    }\n\n    var ret = chooseMethods.find(function (m) {\n      return m.type === options.type;\n    });\n    if (!ret) throw new Error('method-type ' + options.type + ' not found');else return ret;\n  }\n  /**\n   * if no webworker support is needed,\n   * remove idb from the list so that localstorage is been chosen\n   */\n\n\n  if (!options.webWorkerSupport && !isNode) {\n    chooseMethods = chooseMethods.filter(function (m) {\n      return m.type !== 'idb';\n    });\n  }\n\n  var useMethod = chooseMethods.find(function (method) {\n    return method.canBeUsed();\n  });\n  if (!useMethod) throw new Error('No useable methode found:' + JSON.stringify(METHODS.map(function (m) {\n    return m.type;\n  })));else return useMethod;\n}"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAAiC;;AAEjC,IAAIC,OAAO,GAAG,CAACL,YAAD,EAAe;AAC7BC,cADc,EACEC,kBADF,CAAd;AAEA;AACA;AACA;AACA;;AAEA,IAAIE,MAAJ,EAAY;EACV;AACF;AACA;AACA;EACE,IAAIE,UAAU,GAAGC,OAAO,CAAC,uBAAuB;EAChD;EACA;EACA,SAHwB,CAAxB;EAIA;AACF;AACA;AACA;;;EAGE,IAAI,OAAOD,UAAU,CAACE,SAAlB,KAAgC,UAApC,EAAgD;IAC9CH,OAAO,CAACI,IAAR,CAAaH,UAAb;EACD;AACF;;AAED,OAAO,SAASI,YAAT,CAAsBC,OAAtB,EAA+B;EACpC,IAAIC,aAAa,GAAG,GAAGC,MAAH,CAAUF,OAAO,CAACG,OAAlB,EAA2BT,OAA3B,EAAoCU,MAApC,CAA2CC,OAA3C,CAApB,CADoC,CACqC;;EAEzE,IAAIL,OAAO,CAACM,IAAZ,EAAkB;IAChB,IAAIN,OAAO,CAACM,IAAR,KAAiB,UAArB,EAAiC;MAC/B;MACA,OAAOd,cAAP;IACD;;IAED,IAAIe,GAAG,GAAGN,aAAa,CAACO,IAAd,CAAmB,UAAUC,CAAV,EAAa;MACxC,OAAOA,CAAC,CAACH,IAAF,KAAWN,OAAO,CAACM,IAA1B;IACD,CAFS,CAAV;IAGA,IAAI,CAACC,GAAL,EAAU,MAAM,IAAIG,KAAJ,CAAU,iBAAiBV,OAAO,CAACM,IAAzB,GAAgC,YAA1C,CAAN,CAAV,KAA6E,OAAOC,GAAP;EAC9E;EACD;AACF;AACA;AACA;;;EAGE,IAAI,CAACP,OAAO,CAACW,gBAAT,IAA6B,CAAClB,MAAlC,EAA0C;IACxCQ,aAAa,GAAGA,aAAa,CAACG,MAAd,CAAqB,UAAUK,CAAV,EAAa;MAChD,OAAOA,CAAC,CAACH,IAAF,KAAW,KAAlB;IACD,CAFe,CAAhB;EAGD;;EAED,IAAIM,SAAS,GAAGX,aAAa,CAACO,IAAd,CAAmB,UAAUK,MAAV,EAAkB;IACnD,OAAOA,MAAM,CAAChB,SAAP,EAAP;EACD,CAFe,CAAhB;EAGA,IAAI,CAACe,SAAL,EAAgB,MAAM,IAAIF,KAAJ,CAAU,8BAA8BI,IAAI,CAACC,SAAL,CAAerB,OAAO,CAACsB,GAAR,CAAY,UAAUP,CAAV,EAAa;IACpG,OAAOA,CAAC,CAACH,IAAT;EACD,CAF4E,CAAf,CAAxC,CAAN,CAAhB,KAEU,OAAOM,SAAP;AACX"},"metadata":{},"sourceType":"module"}