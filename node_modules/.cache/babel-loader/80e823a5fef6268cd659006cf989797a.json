{"ast":null,"code":"/**\n * logger: undo redo\n */\nvar MAX_LOG_SIZE = 100;\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger() {\n    this.record = [];\n    this.recycle = [];\n    this.initValue = '';\n  }\n\n  var _proto = Logger.prototype;\n\n  _proto.push = function push(val) {\n    var result = this.record.push(val); // 如果超过了最长限制，把之前的清理掉，避免造成内存浪费\n\n    while (this.record.length > MAX_LOG_SIZE) {\n      this.record.shift();\n    }\n\n    return result;\n  };\n\n  _proto.get = function get() {\n    return this.record;\n  };\n\n  _proto.getLast = function getLast() {\n    var length = this.record.length;\n    return this.record[length - 1];\n  };\n\n  _proto.undo = function undo(skipText) {\n    var current = this.record.pop();\n\n    if (typeof current === 'undefined') {\n      return this.initValue;\n    } // 如果最上面的和现在的不一样，那就不需要再pop一次\n\n\n    if (current !== skipText) {\n      this.recycle.push(current);\n      return current;\n    } // 否则的话，最顶上的一个是当前状态，所以要pop两次才能得到之前的结果\n\n\n    var last = this.record.pop();\n\n    if (typeof last === 'undefined') {\n      // 已经没有更老的记录了，把初始值给出去吧\n      this.recycle.push(current);\n      return this.initValue;\n    } // last 才是真正的上一步\n\n\n    this.recycle.push(current);\n    return last;\n  };\n\n  _proto.redo = function redo() {\n    var history = this.recycle.pop();\n\n    if (typeof history !== 'undefined') {\n      this.push(history);\n      return history;\n    }\n\n    return undefined;\n  };\n\n  _proto.cleanRedo = function cleanRedo() {\n    this.recycle = [];\n  };\n\n  _proto.getUndoCount = function getUndoCount() {\n    return this.undo.length;\n  };\n\n  _proto.getRedoCount = function getRedoCount() {\n    return this.recycle.length;\n  };\n\n  return Logger;\n}();\n\nexport default Logger;","map":{"version":3,"names":["MAX_LOG_SIZE","Logger","record","recycle","initValue","_proto","prototype","push","val","result","length","shift","get","getLast","undo","skipText","current","pop","last","redo","history","undefined","cleanRedo","getUndoCount","getRedoCount"],"sources":["/Users/lequocvinh/MathSolver/mathSolverVN/node_modules/react-markdown-editor-lite/esm/plugins/logger/logger.js"],"sourcesContent":["/**\n * logger: undo redo\n */\nvar MAX_LOG_SIZE = 100;\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger() {\n    this.record = [];\n    this.recycle = [];\n    this.initValue = '';\n  }\n\n  var _proto = Logger.prototype;\n\n  _proto.push = function push(val) {\n    var result = this.record.push(val); // 如果超过了最长限制，把之前的清理掉，避免造成内存浪费\n\n    while (this.record.length > MAX_LOG_SIZE) {\n      this.record.shift();\n    }\n\n    return result;\n  };\n\n  _proto.get = function get() {\n    return this.record;\n  };\n\n  _proto.getLast = function getLast() {\n    var length = this.record.length;\n    return this.record[length - 1];\n  };\n\n  _proto.undo = function undo(skipText) {\n    var current = this.record.pop();\n\n    if (typeof current === 'undefined') {\n      return this.initValue;\n    } // 如果最上面的和现在的不一样，那就不需要再pop一次\n\n\n    if (current !== skipText) {\n      this.recycle.push(current);\n      return current;\n    } // 否则的话，最顶上的一个是当前状态，所以要pop两次才能得到之前的结果\n\n\n    var last = this.record.pop();\n\n    if (typeof last === 'undefined') {\n      // 已经没有更老的记录了，把初始值给出去吧\n      this.recycle.push(current);\n      return this.initValue;\n    } // last 才是真正的上一步\n\n\n    this.recycle.push(current);\n    return last;\n  };\n\n  _proto.redo = function redo() {\n    var history = this.recycle.pop();\n\n    if (typeof history !== 'undefined') {\n      this.push(history);\n      return history;\n    }\n\n    return undefined;\n  };\n\n  _proto.cleanRedo = function cleanRedo() {\n    this.recycle = [];\n  };\n\n  _proto.getUndoCount = function getUndoCount() {\n    return this.undo.length;\n  };\n\n  _proto.getRedoCount = function getRedoCount() {\n    return this.recycle.length;\n  };\n\n  return Logger;\n}();\n\nexport default Logger;"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,YAAY,GAAG,GAAnB;;AAEA,IAAIC,MAAM,GAAG,aAAa,YAAY;EACpC,SAASA,MAAT,GAAkB;IAChB,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,SAAL,GAAiB,EAAjB;EACD;;EAED,IAAIC,MAAM,GAAGJ,MAAM,CAACK,SAApB;;EAEAD,MAAM,CAACE,IAAP,GAAc,SAASA,IAAT,CAAcC,GAAd,EAAmB;IAC/B,IAAIC,MAAM,GAAG,KAAKP,MAAL,CAAYK,IAAZ,CAAiBC,GAAjB,CAAb,CAD+B,CACK;;IAEpC,OAAO,KAAKN,MAAL,CAAYQ,MAAZ,GAAqBV,YAA5B,EAA0C;MACxC,KAAKE,MAAL,CAAYS,KAAZ;IACD;;IAED,OAAOF,MAAP;EACD,CARD;;EAUAJ,MAAM,CAACO,GAAP,GAAa,SAASA,GAAT,GAAe;IAC1B,OAAO,KAAKV,MAAZ;EACD,CAFD;;EAIAG,MAAM,CAACQ,OAAP,GAAiB,SAASA,OAAT,GAAmB;IAClC,IAAIH,MAAM,GAAG,KAAKR,MAAL,CAAYQ,MAAzB;IACA,OAAO,KAAKR,MAAL,CAAYQ,MAAM,GAAG,CAArB,CAAP;EACD,CAHD;;EAKAL,MAAM,CAACS,IAAP,GAAc,SAASA,IAAT,CAAcC,QAAd,EAAwB;IACpC,IAAIC,OAAO,GAAG,KAAKd,MAAL,CAAYe,GAAZ,EAAd;;IAEA,IAAI,OAAOD,OAAP,KAAmB,WAAvB,EAAoC;MAClC,OAAO,KAAKZ,SAAZ;IACD,CALmC,CAKlC;;;IAGF,IAAIY,OAAO,KAAKD,QAAhB,EAA0B;MACxB,KAAKZ,OAAL,CAAaI,IAAb,CAAkBS,OAAlB;MACA,OAAOA,OAAP;IACD,CAXmC,CAWlC;;;IAGF,IAAIE,IAAI,GAAG,KAAKhB,MAAL,CAAYe,GAAZ,EAAX;;IAEA,IAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;MAC/B;MACA,KAAKf,OAAL,CAAaI,IAAb,CAAkBS,OAAlB;MACA,OAAO,KAAKZ,SAAZ;IACD,CApBmC,CAoBlC;;;IAGF,KAAKD,OAAL,CAAaI,IAAb,CAAkBS,OAAlB;IACA,OAAOE,IAAP;EACD,CAzBD;;EA2BAb,MAAM,CAACc,IAAP,GAAc,SAASA,IAAT,GAAgB;IAC5B,IAAIC,OAAO,GAAG,KAAKjB,OAAL,CAAac,GAAb,EAAd;;IAEA,IAAI,OAAOG,OAAP,KAAmB,WAAvB,EAAoC;MAClC,KAAKb,IAAL,CAAUa,OAAV;MACA,OAAOA,OAAP;IACD;;IAED,OAAOC,SAAP;EACD,CATD;;EAWAhB,MAAM,CAACiB,SAAP,GAAmB,SAASA,SAAT,GAAqB;IACtC,KAAKnB,OAAL,GAAe,EAAf;EACD,CAFD;;EAIAE,MAAM,CAACkB,YAAP,GAAsB,SAASA,YAAT,GAAwB;IAC5C,OAAO,KAAKT,IAAL,CAAUJ,MAAjB;EACD,CAFD;;EAIAL,MAAM,CAACmB,YAAP,GAAsB,SAASA,YAAT,GAAwB;IAC5C,OAAO,KAAKrB,OAAL,CAAaO,MAApB;EACD,CAFD;;EAIA,OAAOT,MAAP;AACD,CA/EyB,EAA1B;;AAiFA,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}