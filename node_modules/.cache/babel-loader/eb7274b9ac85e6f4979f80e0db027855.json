{"ast":null,"code":"import { tokenRegex, revFormat, formats } from \"./formatting\";\nimport { defaults } from \"../types/options\";\nimport { english } from \"../l10n/default\";\nexport const createDateFormatter = _ref => {\n  let {\n    config = defaults,\n    l10n = english,\n    isMobile = false\n  } = _ref;\n  return (dateObj, frmt, overrideLocale) => {\n    const locale = overrideLocale || l10n;\n\n    if (config.formatDate !== undefined && !isMobile) {\n      return config.formatDate(dateObj, frmt, locale);\n    }\n\n    return frmt.split(\"\").map((c, i, arr) => formats[c] && arr[i - 1] !== \"\\\\\" ? formats[c](dateObj, locale, config) : c !== \"\\\\\" ? c : \"\").join(\"\");\n  };\n};\nexport const createDateParser = _ref2 => {\n  let {\n    config = defaults,\n    l10n = english\n  } = _ref2;\n  return (date, givenFormat, timeless, customLocale) => {\n    if (date !== 0 && !date) return undefined;\n    const locale = customLocale || l10n;\n    let parsedDate;\n    const dateOrig = date;\n    if (date instanceof Date) parsedDate = new Date(date.getTime());else if (typeof date !== \"string\" && date.toFixed !== undefined) parsedDate = new Date(date);else if (typeof date === \"string\") {\n      const format = givenFormat || (config || defaults).dateFormat;\n      const datestr = String(date).trim();\n\n      if (datestr === \"today\") {\n        parsedDate = new Date();\n        timeless = true;\n      } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) parsedDate = new Date(date);else if (config && config.parseDate) parsedDate = config.parseDate(date, format);else {\n        parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));\n        let matched,\n            ops = [];\n\n        for (let i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n          const token = format[i];\n          const isBackSlash = token === \"\\\\\";\n          const escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n\n          if (tokenRegex[token] && !escaped) {\n            regexStr += tokenRegex[token];\n            const match = new RegExp(regexStr).exec(date);\n\n            if (match && (matched = true)) {\n              ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n                fn: revFormat[token],\n                val: match[++matchIndex]\n              });\n            }\n          } else if (!isBackSlash) regexStr += \".\";\n\n          ops.forEach(_ref3 => {\n            let {\n              fn,\n              val\n            } = _ref3;\n            return parsedDate = fn(parsedDate, val, locale) || parsedDate;\n          });\n        }\n\n        parsedDate = matched ? parsedDate : undefined;\n      }\n    }\n\n    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n      config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));\n      return undefined;\n    }\n\n    if (timeless === true) parsedDate.setHours(0, 0, 0, 0);\n    return parsedDate;\n  };\n};\nexport function compareDates(date1, date2) {\n  let timeless = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (timeless !== false) {\n    return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);\n  }\n\n  return date1.getTime() - date2.getTime();\n}\nexport function compareTimes(date1, date2) {\n  return 3600 * (date1.getHours() - date2.getHours()) + 60 * (date1.getMinutes() - date2.getMinutes()) + date1.getSeconds() - date2.getSeconds();\n}\nexport const isBetween = (ts, ts1, ts2) => {\n  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n};\nexport const duration = {\n  DAY: 86400000\n};\nexport function getDefaultHours(config) {\n  let hours = config.defaultHour;\n  let minutes = config.defaultMinute;\n  let seconds = config.defaultSeconds;\n\n  if (config.minDate !== undefined) {\n    const minHour = config.minDate.getHours();\n    const minMinutes = config.minDate.getMinutes();\n    const minSeconds = config.minDate.getSeconds();\n\n    if (hours < minHour) {\n      hours = minHour;\n    }\n\n    if (hours === minHour && minutes < minMinutes) {\n      minutes = minMinutes;\n    }\n\n    if (hours === minHour && minutes === minMinutes && seconds < minSeconds) seconds = config.minDate.getSeconds();\n  }\n\n  if (config.maxDate !== undefined) {\n    const maxHr = config.maxDate.getHours();\n    const maxMinutes = config.maxDate.getMinutes();\n    hours = Math.min(hours, maxHr);\n    if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);\n    if (hours === maxHr && minutes === maxMinutes) seconds = config.maxDate.getSeconds();\n  }\n\n  return {\n    hours,\n    minutes,\n    seconds\n  };\n}","map":{"version":3,"names":["tokenRegex","revFormat","formats","defaults","english","createDateFormatter","config","l10n","isMobile","dateObj","frmt","overrideLocale","locale","formatDate","undefined","split","map","c","i","arr","join","createDateParser","date","givenFormat","timeless","customLocale","parsedDate","dateOrig","Date","getTime","toFixed","format","dateFormat","datestr","String","trim","test","parseDate","noCalendar","getFullYear","setHours","matched","ops","matchIndex","regexStr","length","token","isBackSlash","escaped","match","RegExp","exec","fn","val","forEach","isNaN","errorHandler","Error","compareDates","date1","date2","compareTimes","getHours","getMinutes","getSeconds","isBetween","ts","ts1","ts2","Math","min","max","duration","DAY","getDefaultHours","hours","defaultHour","minutes","defaultMinute","seconds","defaultSeconds","minDate","minHour","minMinutes","minSeconds","maxDate","maxHr","maxMinutes"],"sources":["/Users/lequocvinh/MathSolver/mathSolverVN/node_modules/flatpickr/dist/esm/utils/dates.js"],"sourcesContent":["import { tokenRegex, revFormat, formats, } from \"./formatting\";\nimport { defaults } from \"../types/options\";\nimport { english } from \"../l10n/default\";\nexport const createDateFormatter = ({ config = defaults, l10n = english, isMobile = false, }) => (dateObj, frmt, overrideLocale) => {\n    const locale = overrideLocale || l10n;\n    if (config.formatDate !== undefined && !isMobile) {\n        return config.formatDate(dateObj, frmt, locale);\n    }\n    return frmt\n        .split(\"\")\n        .map((c, i, arr) => formats[c] && arr[i - 1] !== \"\\\\\"\n        ? formats[c](dateObj, locale, config)\n        : c !== \"\\\\\"\n            ? c\n            : \"\")\n        .join(\"\");\n};\nexport const createDateParser = ({ config = defaults, l10n = english }) => (date, givenFormat, timeless, customLocale) => {\n    if (date !== 0 && !date)\n        return undefined;\n    const locale = customLocale || l10n;\n    let parsedDate;\n    const dateOrig = date;\n    if (date instanceof Date)\n        parsedDate = new Date(date.getTime());\n    else if (typeof date !== \"string\" &&\n        date.toFixed !== undefined)\n        parsedDate = new Date(date);\n    else if (typeof date === \"string\") {\n        const format = givenFormat || (config || defaults).dateFormat;\n        const datestr = String(date).trim();\n        if (datestr === \"today\") {\n            parsedDate = new Date();\n            timeless = true;\n        }\n        else if (/Z$/.test(datestr) ||\n            /GMT$/.test(datestr))\n            parsedDate = new Date(date);\n        else if (config && config.parseDate)\n            parsedDate = config.parseDate(date, format);\n        else {\n            parsedDate =\n                !config || !config.noCalendar\n                    ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)\n                    : new Date(new Date().setHours(0, 0, 0, 0));\n            let matched, ops = [];\n            for (let i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n                const token = format[i];\n                const isBackSlash = token === \"\\\\\";\n                const escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n                if (tokenRegex[token] && !escaped) {\n                    regexStr += tokenRegex[token];\n                    const match = new RegExp(regexStr).exec(date);\n                    if (match && (matched = true)) {\n                        ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n                            fn: revFormat[token],\n                            val: match[++matchIndex],\n                        });\n                    }\n                }\n                else if (!isBackSlash)\n                    regexStr += \".\";\n                ops.forEach(({ fn, val }) => (parsedDate = fn(parsedDate, val, locale) || parsedDate));\n            }\n            parsedDate = matched ? parsedDate : undefined;\n        }\n    }\n    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n        config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));\n        return undefined;\n    }\n    if (timeless === true)\n        parsedDate.setHours(0, 0, 0, 0);\n    return parsedDate;\n};\nexport function compareDates(date1, date2, timeless = true) {\n    if (timeless !== false) {\n        return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -\n            new Date(date2.getTime()).setHours(0, 0, 0, 0));\n    }\n    return date1.getTime() - date2.getTime();\n}\nexport function compareTimes(date1, date2) {\n    return (3600 * (date1.getHours() - date2.getHours()) +\n        60 * (date1.getMinutes() - date2.getMinutes()) +\n        date1.getSeconds() -\n        date2.getSeconds());\n}\nexport const isBetween = (ts, ts1, ts2) => {\n    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n};\nexport const duration = {\n    DAY: 86400000,\n};\nexport function getDefaultHours(config) {\n    let hours = config.defaultHour;\n    let minutes = config.defaultMinute;\n    let seconds = config.defaultSeconds;\n    if (config.minDate !== undefined) {\n        const minHour = config.minDate.getHours();\n        const minMinutes = config.minDate.getMinutes();\n        const minSeconds = config.minDate.getSeconds();\n        if (hours < minHour) {\n            hours = minHour;\n        }\n        if (hours === minHour && minutes < minMinutes) {\n            minutes = minMinutes;\n        }\n        if (hours === minHour && minutes === minMinutes && seconds < minSeconds)\n            seconds = config.minDate.getSeconds();\n    }\n    if (config.maxDate !== undefined) {\n        const maxHr = config.maxDate.getHours();\n        const maxMinutes = config.maxDate.getMinutes();\n        hours = Math.min(hours, maxHr);\n        if (hours === maxHr)\n            minutes = Math.min(maxMinutes, minutes);\n        if (hours === maxHr && minutes === maxMinutes)\n            seconds = config.maxDate.getSeconds();\n    }\n    return { hours, minutes, seconds };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}