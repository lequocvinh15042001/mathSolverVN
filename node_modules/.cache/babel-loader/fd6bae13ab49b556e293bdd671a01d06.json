{"ast":null,"code":"import * as XLSX from 'xlsx/xlsx.mjs';\nimport { PREFIX_CURRENCY } from '../utils/constant';\n\nclass CommonUtils {\n  static getBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  static exportExcel(data, nameSheet, nameFile) {\n    return new Promise((resolve, reject) => {\n      var wb = XLSX.utils.book_new();\n      var ws = XLSX.utils.json_to_sheet(data);\n      XLSX.utils.book_append_sheet(wb, ws, nameSheet);\n      XLSX.writeFile(wb, `${nameFile}.xlsx`);\n      resolve('oke');\n    });\n  }\n\n}\n\nCommonUtils.formatter = new Intl.NumberFormat('en-VN', {\n  style: 'currency',\n  currency: 'VND',\n  minimumFractionDigits: PREFIX_CURRENCY.minimumFractionDigits\n});\nexport default CommonUtils;","map":{"version":3,"names":["XLSX","PREFIX_CURRENCY","CommonUtils","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","exportExcel","data","nameSheet","nameFile","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","writeFile","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits"],"sources":["/Users/lequocvinh/MathSolver/mathSolverVN/src/utils/CommonUtils.js"],"sourcesContent":["import * as XLSX from 'xlsx/xlsx.mjs'\r\nimport { PREFIX_CURRENCY } from '../utils/constant'\r\nclass CommonUtils {\r\n    static getBase64(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error)\r\n        })\r\n    }\r\n    static exportExcel(data, nameSheet, nameFile) {\r\n        return new Promise((resolve, reject) => {\r\n            var wb = XLSX.utils.book_new()\r\n            var ws = XLSX.utils.json_to_sheet(data)\r\n            XLSX.utils.book_append_sheet(wb, ws, nameSheet)\r\n            XLSX.writeFile(wb, `${nameFile}.xlsx`)\r\n            resolve('oke')\r\n        })\r\n    }\r\n    static formatter = new Intl.NumberFormat('en-VN', {\r\n        style: 'currency',\r\n        currency: 'VND',\r\n        minimumFractionDigits: PREFIX_CURRENCY.minimumFractionDigits\r\n    })\r\n\r\n}\r\n\r\nexport default CommonUtils;"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,eAAtB;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AACA,MAAMC,WAAN,CAAkB;EACE,OAATC,SAAS,CAACC,IAAD,EAAO;IACnB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACpC,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;MACAD,MAAM,CAACE,aAAP,CAAqBN,IAArB;;MACAI,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;MACAJ,MAAM,CAACK,OAAP,GAAiBC,KAAK,IAAIP,MAAM,CAACO,KAAD,CAAhC;IACH,CALM,CAAP;EAMH;;EACiB,OAAXC,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4B;IAC1C,OAAO,IAAIb,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACpC,IAAIY,EAAE,GAAGnB,IAAI,CAACoB,KAAL,CAAWC,QAAX,EAAT;MACA,IAAIC,EAAE,GAAGtB,IAAI,CAACoB,KAAL,CAAWG,aAAX,CAAyBP,IAAzB,CAAT;MACAhB,IAAI,CAACoB,KAAL,CAAWI,iBAAX,CAA6BL,EAA7B,EAAiCG,EAAjC,EAAqCL,SAArC;MACAjB,IAAI,CAACyB,SAAL,CAAeN,EAAf,EAAoB,GAAED,QAAS,OAA/B;MACAZ,OAAO,CAAC,KAAD,CAAP;IACH,CANM,CAAP;EAOH;;AAjBa;;AAAZJ,W,CAkBKwB,S,GAAY,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EAC9CC,KAAK,EAAE,UADuC;EAE9CC,QAAQ,EAAE,KAFoC;EAG9CC,qBAAqB,EAAE9B,eAAe,CAAC8B;AAHO,CAA/B,C;AAQvB,eAAe7B,WAAf"},"metadata":{},"sourceType":"module"}