{"ast":null,"code":"// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\n\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\nmodule.exports = function linkify(state) {\n  var i,\n      j,\n      l,\n      tokens,\n      token,\n      currentToken,\n      nodes,\n      ln,\n      text,\n      pos,\n      lastPos,\n      level,\n      htmlLinkLevel,\n      url,\n      fullUrl,\n      urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) {\n    return;\n  }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n    htmlLinkLevel = 0; // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i]; // Skip content of markdown links\n\n      if (currentToken.type === 'link_close') {\n        i--;\n\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n\n        continue;\n      } // Skip content of html tag links\n\n\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n\n      if (htmlLinkLevel > 0) {\n        continue;\n      }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        text = currentToken.content;\n        links = state.md.linkify.match(text); // Now split string to nodes\n\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n\n          if (!state.md.validateLink(fullUrl)) {\n            continue;\n          }\n\n          urlText = links[ln].text; // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level = level;\n            nodes.push(token);\n          }\n\n          token = new state.Token('link_open', 'a', 1);\n          token.attrs = [['href', fullUrl]];\n          token.level = level++;\n          token.markup = 'linkify';\n          token.info = 'auto';\n          nodes.push(token);\n          token = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level = level;\n          nodes.push(token);\n          token = new state.Token('link_close', 'a', -1);\n          token.level = --level;\n          token.markup = 'linkify';\n          token.info = 'auto';\n          nodes.push(token);\n          lastPos = links[ln].lastIndex;\n        }\n\n        if (lastPos < text.length) {\n          token = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level = level;\n          nodes.push(token);\n        } // replace current node\n\n\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};","map":{"version":3,"names":["arrayReplaceAt","require","isLinkOpen","str","test","isLinkClose","module","exports","linkify","state","i","j","l","tokens","token","currentToken","nodes","ln","text","pos","lastPos","level","htmlLinkLevel","url","fullUrl","urlText","blockTokens","links","md","options","length","type","pretest","content","children","match","normalizeLink","validateLink","schema","normalizeLinkText","replace","index","Token","slice","push","attrs","markup","info","lastIndex"],"sources":["/Users/lequocvinh/MathSolver/mathSolverVN/node_modules/markdown-it/lib/rules_core/linkify.js"],"sourcesContent":["// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}